from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from services.character_manager import CharacterManager
from database import get_db

router = Router()


@router.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    async for session in get_db():
        user = await CharacterManager.get_user(session, message.from_user.id)
        if not user:
            user = await CharacterManager.create_user(
                session,
                telegram_id=message.from_user.id,
                username=message.from_user.username
            )
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.username}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        else:
            await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.username}!")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ üßô‚Äç‚ôÇÔ∏è", callback_data="my_character")],
        [InlineKeyboardButton(text="–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫ üé≤", callback_data="roll_dice")],
        [InlineKeyboardButton(text="–†–µ–∂–∏–º –î–ú–∞ üêâ", callback_data="dm_mode")]
    ])
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )



@router.callback_query(lambda c: c.data == "register")
async def register_user(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    async for session in get_db():
        user = await CharacterManager.get_user(session, callback_query.from_user.id)
        if not user:
            user = await CharacterManager.create_user(
                session,
                telegram_id=callback_query.from_user.id,
                username=callback_query.from_user.username
            )
            await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        else:
            await callback_query.message.answer(f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {user.username}!")


@router.callback_query(lambda c: c.data == "my_character")
async def my_character(callback_query: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ üìä", callback_data="view_stats")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ‚úèÔ∏è", callback_data="edit_stats")],
        [InlineKeyboardButton(text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å üéí", callback_data="inventory")],
        [InlineKeyboardButton(text="–ó–∞–º–µ—Ç–∫–∏ üìù", callback_data="notes")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚ùå", callback_data="delete_character")]
    ])
    await callback_query.message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "dm_mode")
async def dm_mode(callback_query: CallbackQuery):
    """–ú–µ–Ω—é –î–ú–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é üñãÔ∏è", callback_data="create_session")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ üôã‚Äç‚ôÇÔ∏è", callback_data="add_player")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω—Å—Ç—Ä–∞ üêâ", callback_data="add_monster")],
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π ‚öîÔ∏è", callback_data="manage_initiative")],
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–µ–º üõ°Ô∏è", callback_data="manage_combat")]
    ])
    await callback_query.message.answer(
        "–†–µ–∂–∏–º –î–ú–∞:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "manage_combat")
async def manage_combat(callback_query: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–µ–º."""
    async for session in get_db():
        game_session = await SessionManager.get_session(session, callback_query.from_user.id)
        if game_session:
            initiative_order = "\n".join([f"{i + 1}. {player}" for i, player in enumerate(game_session.current_initiative)])
            await callback_query.message.answer(
                f"–¢–µ–∫—É—â–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞:\n{initiative_order}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥ ‚úÖ", callback_data="end_turn")],
                    [InlineKeyboardButton(text="–ê—Ç–∞–∫–æ–≤–∞—Ç—å ‚öîÔ∏è", callback_data="attack")],
                    [InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ üîÆ", callback_data="cast_spell")]
                ])
            )
        else:
            await callback_query.message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@router.callback_query(lambda c: c.data == "roll_dice")
async def roll_dice(callback_query: CallbackQuery):
    """–ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞."""
    import random
    result = random.randint(1, 20)
    await callback_query.message.answer(f"üé≤ –í—ã –±—Ä–æ—Å–∏–ª–∏ –∫—É–±–∏–∫: {result}")