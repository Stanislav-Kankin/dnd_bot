from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from services.session_manager import SessionManager
from database import get_db

router = Router()


@router.message(Command("dm"))
async def dm_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dm."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é üñãÔ∏è", callback_data="create_session")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ üôã‚Äç‚ôÇÔ∏è", callback_data="add_player")],
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π ‚öîÔ∏è", callback_data="manage_initiative")]
    ])
    await message.answer(
        "–†–µ–∂–∏–º Dungeon Master:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "create_session")
async def create_session(callback_query: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏."""
    async for session in get_db():
        game_session = await SessionManager.create_session(session, callback_query.from_user.id, "–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è")
        await callback_query.message.answer(f"–°–µ—Å—Å–∏—è '{game_session.name}' —Å–æ–∑–¥–∞–Ω–∞! ID: {game_session.id}")


@router.callback_query(lambda c: c.data == "add_player")
async def add_player(callback_query: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ —Å–µ—Å—Å–∏—é."""
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞:")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID –∏–≥—Ä–æ–∫–∞


@router.callback_query(lambda c: c.data == "manage_initiative")
async def manage_initiative(callback_query: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–æ–π."""
    async for session in get_db():
        game_session = await SessionManager.get_session(session, callback_query.from_user.id)
        if game_session:
            initiative_order = "\n".join([f"{i + 1}. {player}" for i, player in enumerate(game_session.current_initiative)])
            await callback_query.message.answer(f"–¢–µ–∫—É—â–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞:\n{initiative_order}")
        else:
            await callback_query.message.answer("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@router.callback_query(lambda c: c.data == "add_monster")
async def add_monster(callback_query: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞."""
    monster_data = {
        "name": "–ì–æ–±–ª–∏–Ω",
        "hp": 10,
        "ac": 15
    }
    async for session in get_db():
        await SessionManager.add_monster(session, callback_query.from_user.id, monster_data)
        await callback_query.message.answer(f"–ú–æ–Ω—Å—Ç—Ä {monster_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω!")


class MonsterCreation(StatesGroup):
    name = State()
    hp = State()
    ac = State()
    attack_dice = State()


@router.callback_query(lambda c: c.data == "add_monster")
async def start_monster_creation(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–Ω—Å—Ç—Ä–∞."""
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞:")
    await state.set_state(MonsterCreation.name)


@router.message(MonsterCreation.name)
async def process_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–Ω—Å—Ç—Ä–∞."""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è (HP):")
    await state.set_state(MonsterCreation.hp)


@router.message(MonsterCreation.hp)
async def process_hp(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ HP –º–æ–Ω—Å—Ç—Ä–∞."""
    await state.update_data(hp=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å –∑–∞—â–∏—Ç—ã (AC):")
    await state.set_state(MonsterCreation.ac)


@router.message(MonsterCreation.ac)
async def process_ac(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ AC –º–æ–Ω—Å—Ç—Ä–∞."""
    await state.update_data(ac=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ç–∞–∫—É (–≥—Ä–∞–Ω–∏ –∫—É–±–∏–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, '20 1'):")
    await state.set_state(MonsterCreation.attack_dice)


@router.message(MonsterCreation.attack_dice)
async def process_attack_dice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ç–∞–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞."""
    dice, count = map(int, message.text.split())
    data = await state.get_data()
    monster_data = {
        "name": data["name"],
        "hp": data["hp"],
        "ac": data["ac"],
        "attack_dice": {"dice": dice, "count": count}
    }
    async for session in get_db():
        await SessionManager.add_monster(session, message.from_user.id, monster_data)
        await message.answer(f"–ú–æ–Ω—Å—Ç—Ä {monster_data['name']} —Å–æ–∑–¥–∞–Ω!")
    await state.clear()
